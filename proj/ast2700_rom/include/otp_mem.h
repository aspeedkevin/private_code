#ifndef __OTP_MEM_H__
#define __OTP_MEM_H__

/* OTP memory address from 0x0~0x2000. (unit: Single Word 16-bits) */
/* ----  0x0  -----
 *       ROM
 * ---- 0x3e0 -----
 *       RBP
 * ---- 0x400 -----
 *      CONF
 * ---- 0x420 -----
 *      STRAP
 * ---- 0x430 -----
 *    STRAP EXT
 * ---- 0x440 -----
 *   User Region
 * ---- 0x1000 ----
 *  Secure Region
 * ---- 0x1c00 ----
 *     Caliptra
 * ---- 0x1f80 ----
 *      SW PUF
 * ---- 0x1fc0 ----
 *      HW PUF
 * ---- 0x2000 ----
 */
#define ROM_REGION_START_ADDR		0x0
#define ROM_REGION_END_ADDR		0x3e0
#define RBP_REGION_START_ADDR		ROM_REGION_END_ADDR
#define RBP_REGION_END_ADDR		0x400
#define CFG_REGION_START_ADDR		RBP_REGION_END_ADDR
#define CFG_REGION_END_ADDR		0x420
#define STRAP_REGION_START_ADDR		CFG_REGION_END_ADDR
#define STRAP_REGION_END_ADDR		0x430
#define STRAPEXT_REGION_START_ADDR	STRAP_REGION_END_ADDR
#define STRAPEXT_REGION_END_ADDR	0x440
#define USER_REGION_START_ADDR		STRAPEXT_REGION_END_ADDR
#define USER_REGION_END_ADDR		0x1000
#define SEC_REGION_START_ADDR		USER_REGION_END_ADDR
#define SEC_REGION_END_ADDR		0x1c00
#define CAL_REGION_START_ADDR		SEC_REGION_END_ADDR
#define CAL_REGION_END_ADDR		0x1f80
#define SW_PUF_REGION_START_ADDR	CAL_REGION_END_ADDR
#define SW_PUF_REGION_END_ADDR		0x1fa0
#define HW_PUF_REGION_START_ADDR	SW_PUF_REGION_END_ADDR
#define HW_PUF_REGION_END_ADDR		0x2000
#define PUF_REGION_SIZE			(HW_PUF_REGION_END_ADDR - SW_PUF_REGION_START_ADDR)

/* OTPRBP */
#define OTPBRP_SOC_ECC_KEY_RETIRE		(RBP_REGION_START_ADDR)
#define OTPBRP_SOC_LMS_KEY_RETIRE		(RBP_REGION_START_ADDR + 0x1)
#define OTPBRP_CPTRA_MANUF_PK_KEYHASH_RETIRE	(RBP_REGION_START_ADDR + 0x2)
#define OTPBRP_CPTRA_OWN_PK_KEYHASH_RETIRE	(RBP_REGION_START_ADDR + 0x3)
#define OTPBRP_SOC_FMC_SVN			(RBP_REGION_START_ADDR + 0x4)
#define OTPBRP_CPTRA_FMC_SVN			(RBP_REGION_START_ADDR + 0x8)
#define OTPBRP_CPTRA_RT_SVN			(RBP_REGION_START_ADDR + 0xa)
#define OTPBRP_CPTRA_MANU_ECC_KEY_MASK		(RBP_REGION_START_ADDR + 0x12)
#define OTPBRP_CPTRA_MANU_LMS_KEY_MASK		(RBP_REGION_START_ADDR + 0x13)

/* OTPCFG */
#define OTPCFG0					(CFG_REGION_START_ADDR + 0x0)
#define OTPCFG2					(CFG_REGION_START_ADDR + 0x2)
#define OTPCFG4					(CFG_REGION_START_ADDR + 0x4)
#define OTPCFG5					(CFG_REGION_START_ADDR + 0x5)
#define OTPCFG6					(CFG_REGION_START_ADDR + 0x6)
#define OTPCFG7					(CFG_REGION_START_ADDR + 0x7)
#define OTPCFG9					(CFG_REGION_START_ADDR + 0x9)
#define OTPCFG10				(CFG_REGION_START_ADDR + 0xa)

/* OTPCAL */
#define OTPCAL0					(CAL_REGION_START_ADDR)
#define   OTPCAL0_EN_LMS_VERIFY			BIT(0)
#define OTPCAL1					(CAL_REGION_START_ADDR + 0x1)
#define   OTPCAL1_DIS_ANTI_ROLLBACK		BIT(0)
#define OTPCAL2					(CAL_REGION_START_ADDR + 0x2)
#define OTPCAL_FIELD_ENTROPY			OTPCAL2
#define OTPCAL18				(CAL_REGION_START_ADDR + 0x12)
#define OTPCAL_MANU_KEY_HASH			OTPCAL18
#define OTPCAL42				(CAL_REGION_START_ADDR + 0x2a)
#define OTPCAL_IDEVID_CERT_ATTR			OTPCAL42
#define OTPCAL90				(CAL_REGION_START_ADDR + 0x5a)
#define OTPCAL_IDEVID_MANUF_HSM_ID		OTPCAL90

/* OTPPUF */
#define HW_PUF_OBF_KEY				(HW_PUF_REGION_START_ADDR)
#define HW_PUF_UDS_SEED				(HW_PUF_REGION_START_ADDR + 0x10)
#define HW_PUF_IROT_UDS				(HW_PUF_REGION_START_ADDR + 0x28)
#define HW_PUF_VAULT_KEY			(HW_PUF_REGION_START_ADDR + 0x38)
#define OBF_KEY_SIZE				(HW_PUF_UDS_SEED - HW_PUF_OBF_KEY)
#define UDS_SEED_SIZE				(HW_PUF_IROT_UDS - HW_PUF_UDS_SEED)

/* OTPSEC */
#define OTP_KEY_HEADER_START_ADDR		SEC_REGION_START_ADDR
#define OTP_KEY_HEADER_LEN			0xa0
#define OTP_KEY_HEADER_END_ADDR			(OTP_KEY_HEADER_START_ADDR + OTP_KEY_HEADER_LEN)
#define   OTP_KEY_ID_MASK			GENMASK(3, 0)
#define   OTP_KEY_TYPE_MASK			GENMASK(6, 4)
#define   OTP_KEY_TYPE_EMPTY			0
#define   OTP_KEY_TYPE_OEM_DSS_ECDSA384		1
#define   OTP_KEY_TYPE_OEM_DSS_LMS		2
#define   OTP_KEY_TYPE_CPTRA_MANUF_PK_HASH	3
#define   OTP_KEY_TYPE_CPTRA_OWN_PK_HASH	4
#define   OTP_KEY_TYPE_VAULT_KEY		5
#define   OTP_KEY_TYPE_VAULT_KEY_SEED		6

#define   ECDSA384_KEY_LEN			(384 / 8)
#define   OEM_DSS_ECDSA384_KEY_LEN		((ECDSA384_KEY_LEN * 2) / 4)	/* x + y len */
#define   OEM_DSS_LMS_KEY_LEN			12
#define   OTP_CPTRA_PK_HASH_LEN			((384 / 8) / 4)
#define   OTP_CPTRA_MANUF_ECC_KEY_MASK		GENMASK(3, 0)
#define   OTP_CPTRA_MANUF_LMS_KEY_MASK		GENMASK(31, 0)
#define   VAULT_KEY_LEN				8

union otp_key_header_u {
	uint32_t value;
	struct {
		uint32_t key_id    : 4;		/* [3:0] */
		uint32_t key_type  : 3;		/* [6:4] */
		uint32_t reserved0 : 8;		/* [14:7] */
		uint32_t last      : 1;		/* [15:15] */
		uint32_t offset    : 12;	/* [27:16] */
		uint32_t reserved1 : 4;		/* [31:28] */
	} fields;
};

struct cptra_manuf_key {
	uint32_t manuf_pk_hash[OTP_CPTRA_PK_HASH_LEN];
	uint16_t manuf_ecc_key_mask;
	uint32_t manuf_lms_key_mask;
};

#endif
