#ifndef __I3C_H__
#define __I3C_H__

#include <types.h>
#include <utils.h>
#include <bootdev.h>

struct i3c_hci {
	u32 index;
	u32 caps;
	void *base_regs;
	void *PIO_regs;
	void *EXTCAPS_regs;
	void *INHOUSE_regs;
	void *PHY_regs;
	/* Temp buffer to store the data from PIO fifo*/
	u8 data[128];
};

#define I3C_BCR_DEVICE_ROLE(bcr)	((bcr) & GENMASK(7, 6))
#define I3C_BCR_I3C_SLAVE		0
#define I3C_BCR_I3C_MASTER		BIT(6)
#define I3C_BCR_HDR_CAP			BIT(5)
#define I3C_BCR_BRIDGE			BIT(4)
#define I3C_BCR_OFFLINE_CAP		BIT(3)
#define I3C_BCR_IBI_PAYLOAD		BIT(2)
#define I3C_BCR_IBI_REQ_CAP		BIT(1)
#define I3C_BCR_MAX_DATA_SPEED_LIM	BIT(0)

/**
 * enum i3c_hdr_mode - HDR mode ids
 * @I3C_HDR_DDR: DDR mode
 * @I3C_HDR_TSP: TSP mode
 * @I3C_HDR_TSL: TSL mode
 * @I3C_HDR_BT: BT mode
 */
enum i3c_hdr_mode {
	I3C_HDR_DDR,
	I3C_HDR_TSP,
	I3C_HDR_TSL,
	I3C_HDR_BT,
};

#define reg_read(r)		readl(hci->base_regs + (r))
#define reg_write(r, v)		writel(v, hci->base_regs + (r))
#define reg_set(r, v)		reg_write(r, reg_read(r) | (v))
#define reg_clear(r, v)		reg_write(r, reg_read(r) & ~(v))

#define HCI_VERSION			0x00	/* HCI Version (in BCD) */

#define HC_CONTROL			0x04
#define HC_CONTROL_BUS_ENABLE		BIT(31)
#define HC_CONTROL_RESUME		BIT(30)
#define HC_CONTROL_ABORT		BIT(29)
#define HC_CONTROL_HALT_ON_CMD_TIMEOUT	BIT(12)
#define HC_CONTROL_HOT_JOIN_CTRL	BIT(8)	/* Hot-Join ACK/NACK Control */
#define HC_CONTROL_I2C_TARGET_PRESENT	BIT(7)
#define HC_CONTROL_PIO_MODE		BIT(6)	/* DMA/PIO Mode Selector */
#define HC_CONTROL_DATA_BIG_ENDIAN	BIT(4)
#define HC_CONTROL_IBA_INCLUDE		BIT(0)	/* Include I3C Broadcast Address */

#define MASTER_DEVICE_ADDR		0x08	/* Master Device Address */
#define MASTER_DYNAMIC_ADDR_VALID	BIT(31)	/* Dynamic Address is Valid */
#define MASTER_DYNAMIC_ADDR(v)		FIELD_PREP(GENMASK(22, 16), v)

#define HC_CAPABILITIES			0x0c
#define HC_CAP_SG_DC_EN			BIT(30)
#define HC_CAP_SG_IBI_EN		BIT(29)
#define HC_CAP_SG_CR_EN			BIT(28)
#define HC_CAP_MAX_DATA_LENGTH		GENMASK(24, 22)
#define HC_CAP_CMD_SIZE			GENMASK(21, 20)
#define HC_CAP_DIRECT_COMMANDS_EN	BIT(18)
#define HC_CAP_MULTI_LANE_EN		BIT(15)
#define HC_CAP_CMD_CCC_DEFBYTE		BIT(10)
#define HC_CAP_HDR_BT_EN		BIT(8)
#define HC_CAP_HDR_TS_EN		BIT(7)
#define HC_CAP_HDR_DDR_EN		BIT(6)
#define HC_CAP_NON_CURRENT_MASTER_CAP	BIT(5)	/* master handoff capable */
#define HC_CAP_DATA_BYTE_CFG_EN		BIT(4)	/* endian selection possible */
#define HC_CAP_AUTO_COMMAND		BIT(3)
#define HC_CAP_COMBO_COMMAND		BIT(2)

#define RESET_CONTROL			0x10
#define BUS_RESET			BIT(31)
#define BUS_RESET_TYPE			GENMASK(30, 29)
#define IBI_QUEUE_RST			BIT(5)
#define RX_FIFO_RST			BIT(4)
#define TX_FIFO_RST			BIT(3)
#define RESP_QUEUE_RST			BIT(2)
#define CMD_QUEUE_RST			BIT(1)
#define SOFT_RST			BIT(0)	/* Core Reset */

#define PRESENT_STATE			0x14
#define STATE_CURRENT_MASTER		BIT(2)

#define INTR_STATUS			0x20
#define INTR_STATUS_ENABLE		0x24
#define INTR_SIGNAL_ENABLE		0x28
#define INTR_FORCE			0x2c
#define INTR_HC_CMD_SEQ_UFLOW_STAT	BIT(12)	/* Cmd Sequence Underflow */
#define INTR_HC_RESET_CANCEL		BIT(11)	/* HC Cancelled Reset */
#define INTR_HC_INTERNAL_ERR		BIT(10)	/* HC Internal Error */
#define INTR_HC_PIO			BIT(8)	/* cascaded PIO interrupt */
#define INTR_HC_RINGS			GENMASK(7, 0)

#define DAT_SECTION			0x30	/* Device Address Table */
#define DAT_ENTRY_SIZE			GENMASK(31, 28)
#define DAT_TABLE_SIZE			GENMASK(18, 12)
#define DAT_TABLE_OFFSET		GENMASK(11, 0)

#define DCT_SECTION			0x34	/* Device Characteristics Table */
#define DCT_ENTRY_SIZE			GENMASK(31, 28)
#define DCT_TABLE_INDEX			GENMASK(23, 19)
#define DCT_TABLE_SIZE			GENMASK(18, 12)
#define DCT_TABLE_OFFSET		GENMASK(11, 0)

#define RING_HEADERS_SECTION		0x38
#define RING_HEADERS_OFFSET		GENMASK(15, 0)

#define PIO_SECTION			0x3c
#define PIO_REGS_OFFSET			GENMASK(15, 0)	/* PIO Offset */

#define EXT_CAPS_SECTION		0x40
#define EXT_CAPS_OFFSET			GENMASK(15, 0)

#define IBI_NOTIFY_CTRL			0x58	/* IBI Notify Control */
#define IBI_NOTIFY_SIR_REJECTED		BIT(3)	/* Rejected Target Interrupt Request */
#define IBI_NOTIFY_MR_REJECTED		BIT(1)	/* Rejected Master Request Control */
#define IBI_NOTIFY_HJ_REJECTED		BIT(0)	/* Rejected Hot-Join Control */

#define DEV_CTX_BASE_LO			0x60
#define DEV_CTX_BASE_HI			0x64

/* Aspeed in-house register */
#define ast_inhouse_read(r)		readl(hci->INHOUSE_regs + (r))
#define ast_inhouse_write(r, v)		writel(v, hci->INHOUSE_regs + (r))

#define ASPEED_I3C_CTRL			0x0
#define ASPEED_I3C_CTRL_STOP_QUEUE_PT	BIT(31) //Stop the queue read pointer.
#define ASPEED_I3C_SLV_CCC_NOTIFY_DIS	BIT(22) //Only generate the response with SETMRL/SETMWL
#define ASPEED_I3C_CTRL_INIT		BIT(4)
#define ASPEED_I3C_CTRL_INIT_MODE	GENMASK(1, 0)
#define INIT_MST_MODE 0
#define INIT_SEC_MST_MODE 1
#define INIT_SLV_MODE 2

#define ASPEED_I3C_STS	0x4
#define ASPEED_I3C_STS_SLV_DYNAMIC_ADDRESS_VALID	BIT(23)
#define ASPEED_I3C_STS_SLV_DYNAMIC_ADDRESS		GENMASK(22, 16)
#define ASPEED_I3C_STS_MODE_PURE_SLV			BIT(8)
#define ASPEED_I3C_STS_MODE_SECONDARY_SLV_TO_MST	BIT(7)
#define ASPEED_I3C_STS_MODE_SECONDARY_MST_TO_SLV	BIT(6)
#define ASPEED_I3C_STS_MODE_SECONDARY_SLV		BIT(5)
#define ASPEED_I3C_STS_MODE_SECONDARY_MST		BIT(4)
#define ASPEED_I3C_STS_MODE_PRIMARY_SLV_TO_MST		BIT(3)
#define ASPEED_I3C_STS_MODE_PRIMARY_MST_TO_SLV		BIT(2)
#define ASPEED_I3C_STS_MODE_PRIMARY_SLV			BIT(1)
#define ASPEED_I3C_STS_MODE_PRIMARY_MST			BIT(0)

#define ASPEED_I3C_DAA_INDEX0	0x10
#define ASPEED_I3C_DAA_INDEX1	0x14
#define ASPEED_I3C_DAA_INDEX2	0x18
#define ASPEED_I3C_DAA_INDEX3	0x1C

#define ASPEED_I3C_AUTOCMD_0	0x20
#define ASPEED_I3C_AUTOCMD_1	0x24
#define ASPEED_I3C_AUTOCMD_2	0x28
#define ASPEED_I3C_AUTOCMD_3	0x2C
#define ASPEED_I3C_AUTOCMD_4	0x30
#define ASPEED_I3C_AUTOCMD_5	0x34
#define ASPEED_I3C_AUTOCMD_6	0x38
#define ASPEED_I3C_AUTOCMD_7	0x3C

#define ASPEED_I3C_AUTOCMD_SEL_0_7	0x40
#define ASPEED_I3C_AUTOCMD_SEL_8_15	0x44
#define ASPEED_I3C_AUTOCMD_SEL_16_23	0x48
#define ASPEED_I3C_AUTOCMD_SEL_24_31	0x4C
#define ASPEED_I3C_AUTOCMD_SEL_32_39	0x50
#define ASPEED_I3C_AUTOCMD_SEL_40_47	0x54
#define ASPEED_I3C_AUTOCMD_SEL_48_55	0x58
#define ASPEED_I3C_AUTOCMD_SEL_56_63	0x5C
#define ASPEED_I3C_AUTOCMD_SEL_64_71	0x60
#define ASPEED_I3C_AUTOCMD_SEL_72_79	0x64
#define ASPEED_I3C_AUTOCMD_SEL_80_87	0x68
#define ASPEED_I3C_AUTOCMD_SEL_88_95	0x6C
#define ASPEED_I3C_AUTOCMD_SEL_96_103	0x70
#define ASPEED_I3C_AUTOCMD_SEL_104_111	0x74
#define ASPEED_I3C_AUTOCMD_SEL_112_119	0x78
#define ASPEED_I3C_AUTOCMD_SEL_120_127	0x7C

#define ASPEED_I3C_SLV_CHAR_CTRL	0xA0
#define ASPEED_I3C_SLV_CHAR_CTRL_DCR	GENMASK(23, 16)
#define ASPEED_I3C_SLV_CHAR_CTRL_BCR	GENMASK(15, 8)
#define     SLV_BCR_DEVICE_ROLE		GENMASK(7, 6)
#define ASPEED_I3C_SLV_CHAR_CTRL_STATIC_ADDR_EN	BIT(7)
#define ASPEED_I3C_SLV_CHAR_CTRL_STATIC_ADDR	GENMASK(6, 0)
#define SLV_PID_HI(x)			(((x) >> 32) & GENMASK(15, 0))
#define SLV_PID_LO(x)			((x) & GENMASK(31, 0))
#define ASPEED_I3C_SLV_PID_LO	0xA4
#define ASPEED_I3C_SLV_PID_HI	0xA8
#define ASPEED_I3C_SLV_FSM	0xAC
#define ASPEED_I3C_SLV_FSM_MASK GENMASK(5, 0)
#define ASPEED_I3C_SLV_FSM_HALT 0x16
#define ASPEED_I3C_SLV_CAP_CTRL	0xB0
#define ASPEED_I3C_SLV_CAP_CTRL_PEC_EN		BIT(31)
#define ASPEED_I3C_SLV_CAP_CTRL_HAIT_IF_IBI_ERR	BIT(30)
#define ASPEED_I3C_SLV_CAP_CTRL_ACCEPT_CR	BIT(16)
#define ASPEED_I3C_SLV_CAP_CTRL_HJ_REQ		BIT(10)
#define ASPEED_I3C_SLV_CAP_CTRL_MR_REQ		BIT(9)
#define ASPEED_I3C_SLV_CAP_CTRL_IBI_REQ		BIT(8)
#define ASPEED_I3C_SLV_CAP_CTRL_HJ_WAIT		BIT(6)
#define ASPEED_I3C_SLV_CAP_CTRL_MR_WAIT		BIT(5)
#define ASPEED_I3C_SLV_CAP_CTRL_IBI_WAIT	BIT(4)
#define ASPEED_I3C_SLV_CAP_CTRL_NOTSUP_DEF_BYTE	BIT(1)
#define ASPEED_I3C_SLV_CAP_CTRL_I2C_DEV		BIT(0)
/* CCC related registers */
#define ASPEED_I3C_SLV_STS1			0xB4
#define ASPEED_I3C_SLV_STS1_IBI_PAYLOAD_SIZE	GENMASK(31, 24)
#define ASPEED_I3C_SLV_STS1_RSTACT		GENMASK(22, 16)
/* the parameters for the HDR-DDR Data Transfer Early Termination procedure*/
#define ASPEED_I3C_SLV_STS1_ETP_ACK_CAP		BIT(15)
#define ASPEED_I3C_SLV_STS1_ETP_W_REQ		BIT(14)
#define ASPEED_I3C_SLV_STS1_ETP_CRC		GENMASK(13, 12)
#define ASPEED_I3C_SLV_STS1_ENDXFER_CONFIRM	BIT(11)
#define ASPEED_I3C_SLV_STS1_ENTER_TEST_MDOE	BIT(8)
#define ASPEED_I3C_SLV_STS1_HJ_EN		BIT(6)
#define ASPEED_I3C_SLV_STS1_CR_EN		BIT(5)
#define ASPEED_I3C_SLV_STS1_IBI_EN		BIT(4)
#define ASPEED_I3C_SLV_STS1_HJ_DONE		BIT(2)
#define ASPEED_I3C_SLV_STS1_CR_DONE		BIT(1)
#define ASPEED_I3C_SLV_STS1_IBI_DONE		BIT(0)
#define ASPEED_I3C_SLV_STS2			0xB8
#define ASPEED_I3C_SLV_STS2_MWL			GENMASK(31, 16)
#define ASPEED_I3C_SLV_STS2_MRL			GENMASK(15, 0)
#define ASPEED_I3C_SLV_STS3_GROUP_ADDR		0xBC
#define ASPEED_I3C_SLV_STS3_GROUP3_VALID	BIT(31)
#define ASPEED_I3C_SLV_STS3_GROUP3_ADDR		GENMASK(30, 24)
#define ASPEED_I3C_SLV_STS3_GROUP2_VALID	BIT(23)
#define ASPEED_I3C_SLV_STS3_GROUP2_ADDR		GENMASK(22, 16)
#define ASPEED_I3C_SLV_STS3_GROUP1_VALID	BIT(15)
#define ASPEED_I3C_SLV_STS3_GROUP1_ADDR		GENMASK(14, 8)
#define ASPEED_I3C_SLV_STS3_GROUP0_VALID	BIT(7)
#define ASPEED_I3C_SLV_STS3_GROUP0_ADDR		GENMASK(6, 0)
#define ASPEED_I3C_SLV_STS4_RSTACT_TIME		0xC0
#define ASPEED_I3C_SLV_STS4_DBG_NET		GENMASK(23, 16)
#define ASPEED_I3C_SLV_STS4_WHOLE_CHIP		GENMASK(15, 8)
#define ASPEED_I3C_SLV_STS4_I3C			GENMASK(7, 0)
#define ASPEED_I3C_SLV_STS5_GETMXDS_RW		0xC4
#define ASPEED_I3C_SLV_STS5_MAXWR		GENMASK(15, 8)
#define ASPEED_I3C_SLV_STS5_MAXRD		GENMASK(7, 0)
#define ASPEED_I3C_SLV_STS6_GETMXDS		0xC8
#define ASPEED_I3C_SLV_STS6_FORMAT		BIT(24)
#define ASPEED_I3C_SLV_STS6_MAXRD_TURN_H	GENMASK(23, 16)
#define ASPEED_I3C_SLV_STS6_MAXRD_TURN_M	GENMASK(15, 8)
#define ASPEED_I3C_SLV_STS6_MAXRD_TURN_L	GENMASK(7, 0)
#define ASPEED_I3C_SLV_STS7_GETSTATUS		0xCC
#define ASPEED_I3C_SLV_STS7_PRECR		GENMASK(31, 16)
#define ASPEED_I3C_SLV_STS7_TGT			GENMASK(15, 0)
#define ASPEED_I3C_SLV_STS8_GETCAPS_TGT		0xD0
#define ASPEED_I3C_SLV_STS9_GETCAPS_VT_CR	0xD4
#define ASPEED_I3C_SLV_STS7_VT			GENMASK(31, 16)
#define ASPEED_I3C_SLV_STS7_CR			GENMASK(15, 0)

#define ASPEED_I3C_QUEUE_PTR0		0xD8
#define QUEUE_PTR0_TX_R(q)		FIELD_GET(GENMASK(24, 20), q)
#define QUEUE_PTR0_TX_W(q)		FIELD_GET(GENMASK(16, 12), q)
#define QUEUE_PTR0_IBI_R(q)		FIELD_GET(GENMASK(11, 10), q)
#define QUEUE_PTR0_IBI_W(q)		FIELD_GET(GENMASK(9, 8), q)
#define QUEUE_PTR0_RESP_R(q)		FIELD_GET(GENMASK(7, 6), q)
#define QUEUE_PTR0_RESP_W(q)		FIELD_GET(GENMASK(5, 4), q)
#define QUEUE_PTR0_CMD_R(q)		FIELD_GET(GENMASK(3, 2), q)
#define QUEUE_PTR0_CMD_W(q)		FIELD_GET(GENMASK(1, 0), q)

#define ASPEED_I3C_QUEUE_PTR1		0xDC
#define QUEUE_PTR1_IBI_DATA_R(q)	FIELD_GET(GENMASK(28, 24), q)
#define QUEUE_PTR1_IBI_DATA_W(q)	FIELD_GET(GENMASK(20, 16), q)
#define QUEUE_PTR1_RX_R(q)	        FIELD_GET(GENMASK(12, 8), q)
#define QUEUE_PTR1_RX_W(q)	        FIELD_GET(GENMASK(4, 0), q)

#define ASPEED_I3C_INTR_STATUS		0xE0
#define ASPEED_I3C_INTR_STATUS_ENABLE	0xE4
#define ASPEED_I3C_INTR_SIGNAL_ENABLE	0xE8
#define ASPEED_I3C_INTR_FORCE		0xEC
#define ASPEED_I3C_INTR_I2C_SDA_STUCK_LOW	BIT(14)
#define ASPEED_I3C_INTR_I3C_SDA_STUCK_HIGH	BIT(13)
#define ASPEED_I3C_INTR_I3C_SDA_STUCK_LOW	BIT(12)
#define ASPEED_I3C_INTR_MST_INTERNAL_DONE	BIT(10)
#define ASPEED_I3C_INTR_MST_DDR_READ_DONE	BIT(9)
#define ASPEED_I3C_INTR_MST_DDR_WRITE_DONE	BIT(8)
#define ASPEED_I3C_INTR_MST_IBI_DONE		BIT(7)
#define ASPEED_I3C_INTR_MST_READ_DONE		BIT(6)
#define ASPEED_I3C_INTR_MST_WRITE_DONE		BIT(5)
#define ASPEED_I3C_INTR_MST_DAA_DONE		BIT(4)
#define ASPEED_I3C_INTR_SLV_SCL_STUCK		BIT(1)
#define ASPEED_I3C_INTR_TGRST			BIT(0)

#define ASPEED_I3C_INTR_SUM_STATUS	0xF0
#define ASPEED_INTR_SUM_INHOUSE		BIT(3)
#define ASPEED_INTR_SUM_RHS		BIT(2)
#define ASPEED_INTR_SUM_PIO		BIT(1)
#define ASPEED_INTR_SUM_CAP		BIT(0)

#define ASPEED_I3C_INTR_RENEW		0xF4

/* Aspeed Phy register */
#define ast_phy_read(r)			readl(hci->PHY_regs + (r))
#define ast_phy_write(r, v)		writel(v, hci->PHY_regs + (r))

/* I2C FM */
#define PHY_I2C_FM_CTRL0		0x8
#define PHY_I2C_FM_CTRL0_CAS		GENMASK(25, 16)
#define PHY_I2C_FM_CTRL0_SU_STO		GENMASK(9, 0)
#define PHY_I2C_FM_CTRL1		0xC
#define PHY_I2C_FM_CTRL1_SCL_H		GENMASK(25, 16)
#define PHY_I2C_FM_CTRL1_SCL_L		GENMASK(9, 0)
#define PHY_I2C_FM_CTRL2		0x10
#define PHY_I2C_FM_CTRL2_ACK_H		GENMASK(25, 16)
#define PHY_I2C_FM_CTRL2_ACK_L		GENMASK(9, 0)
#define PHY_I2C_FM_CTRL3		0x14
#define PHY_I2C_FM_CTRL3_HD_DAT		GENMASK(25, 16)
#define PHY_I2C_FM_CTRL3_AHD_DAT	GENMASK(9, 0)

#define PHY_I2C_FM_DEFAULT_CAS_NS	1130
#define PHY_I2C_FM_DEFAULT_SU_STO_NS	1370
#define PHY_I2C_FM_DEFAULT_SCL_H_NS	1130
#define PHY_I2C_FM_DEFAULT_SCL_L_NS	1370
#define PHY_I2C_FM_DEFAULT_HD_DAT	10
#define PHY_I2C_FM_DEFAULT_AHD_DAT	10

/* I2C FMP */
#define PHY_I2C_FMP_CTRL0		0x18
#define PHY_I2C_FMP_CTRL0_CAS		GENMASK(25, 16)
#define PHY_I2C_FMP_CTRL0_SU_STO	GENMASK(9, 0)
#define PHY_I2C_FMP_CTRL1		0x1C
#define PHY_I2C_FMP_CTRL1_SCL_H		GENMASK(25, 16)
#define PHY_I2C_FMP_CTRL1_SCL_L		GENMASK(9, 0)
#define PHY_I2C_FMP_CTRL2		0x20
#define PHY_I2C_FMP_CTRL2_ACK_H		GENMASK(25, 16)
#define PHY_I2C_FMP_CTRL2_ACK_L		GENMASK(9, 0)
#define PHY_I2C_FMP_CTRL3		0x24
#define PHY_I2C_FMP_CTRL3_HD_DAT	GENMASK(25, 16)
#define PHY_I2C_FMP_CTRL3_AHD_DAT	GENMASK(9, 0)

#define PHY_I2C_FMP_DEFAULT_CAS_NS	380
#define PHY_I2C_FMP_DEFAULT_SU_STO_NS	620
#define PHY_I2C_FMP_DEFAULT_SCL_H_NS	380
#define PHY_I2C_FMP_DEFAULT_SCL_L_NS	620
#define PHY_I2C_FMP_DEFAULT_HD_DAT	10
#define PHY_I2C_FMP_DEFAULT_AHD_DAT	10

/* I3C OD */
#define PHY_I3C_OD_CTRL0		0x28
#define PHY_I3C_OD_CTRL0_CAS		GENMASK(25, 16)
#define PHY_I3C_OD_CTRL0_SU_STO		GENMASK(9, 0)
#define PHY_I3C_OD_CTRL1		0x2C
#define PHY_I3C_OD_CTRL1_SCL_H		GENMASK(25, 16)
#define PHY_I3C_OD_CTRL1_SCL_L		GENMASK(9, 0)
#define PHY_I3C_OD_CTRL2		0x30
#define PHY_I3C_OD_CTRL2_ACK_H		GENMASK(25, 16)
#define PHY_I3C_OD_CTRL2_ACK_L		GENMASK(9, 0)
#define PHY_I3C_OD_CTRL3		0x34
#define PHY_I3C_OD_CTRL3_HD_DAT		GENMASK(25, 16)
#define PHY_I3C_OD_CTRL3_AHD_DAT	GENMASK(9, 0)

#define PHY_I3C_OD_DEFAULT_CAS_NS	40
#define PHY_I3C_OD_DEFAULT_SU_STO_NS	40
#define PHY_I3C_OD_DEFAULT_SCL_H_NS	380
#define PHY_I3C_OD_DEFAULT_SCL_L_NS	620
#define PHY_I3C_OD_DEFAULT_HD_DAT	10
#define PHY_I3C_OD_DEFAULT_AHD_DAT	10

/* I3C PP SDR0 */
#define PHY_I3C_SDR0_CTRL0			0x38
#define PHY_I3C_SDR0_CTRL0_SCL_H		GENMASK(25, 16)
#define PHY_I3C_SDR0_CTRL0_SCL_L		GENMASK(9, 0)
#define PHY_I3C_SDR0_CTRL1			0x3C
#define PHY_I3C_SDR0_CTRL1_TBIT_H		GENMASK(25, 16)
#define PHY_I3C_SDR0_CTRL1_TBIT_L		GENMASK(9, 0)
#define PHY_I3C_SDR0_CTRL2			0x40
#define PHY_I3C_SDR0_CTRL2_HD_PP		GENMASK(25, 16)
#define PHY_I3C_SDR0_CTRL2_TBIT_HD_PP		GENMASK(9, 0)

/* 1MHz */
#define PHY_I3C_SDR0_DEFAULT_SCL_H_NS		380
#define PHY_I3C_SDR0_DEFAULT_SCL_L_NS		620
#define PHY_I3C_SDR0_DEFAULT_TBIT_H_NS		380
#define PHY_I3C_SDR0_DEFAULT_TBIT_L_NS		620
#define PHY_I3C_SDR0_DEFAULT_HD_PP_NS		10
#define PHY_I3C_SDR0_DEFAULT_TBIT_HD_PP_NS	10

/* I3C PP SDR1 */
#define PHY_I3C_SDR1_CTRL0			0x44
#define PHY_I3C_SDR1_CTRL0_SCL_H		GENMASK(25, 16)
#define PHY_I3C_SDR1_CTRL0_SCL_L		GENMASK(9, 0)
#define PHY_I3C_SDR1_CTRL1			0x48
#define PHY_I3C_SDR1_CTRL1_TBIT_H		GENMASK(25, 16)
#define PHY_I3C_SDR1_CTRL1_TBIT_L		GENMASK(9, 0)
#define PHY_I3C_SDR1_CTRL2			0x4C
#define PHY_I3C_SDR1_CTRL2_HD_PP		GENMASK(25, 16)
#define PHY_I3C_SDR1_CTRL2_TBIT_HD_PP		GENMASK(9, 0)
/* I3C PP SDR2 */
#define PHY_I3C_SDR2_CTRL0			0x50
#define PHY_I3C_SDR2_CTRL0_SCL_H		GENMASK(25, 16)
#define PHY_I3C_SDR2_CTRL0_SCL_L		GENMASK(9, 0)
#define PHY_I3C_SDR2_CTRL1			0x54
#define PHY_I3C_SDR2_CTRL1_TBIT_H		GENMASK(25, 16)
#define PHY_I3C_SDR2_CTRL1_TBIT_L		GENMASK(9, 0)
#define PHY_I3C_SDR2_CTRL2			0x58
#define PHY_I3C_SDR2_CTRL2_HD_PP		GENMASK(25, 16)
#define PHY_I3C_SDR2_CTRL2_TBIT_HD_PP		GENMASK(9, 0)
/* I3C PP SDR3 */
#define PHY_I3C_SDR3_CTRL0			0x5C
#define PHY_I3C_SDR3_CTRL0_SCL_H		GENMASK(25, 16)
#define PHY_I3C_SDR3_CTRL0_SCL_L		GENMASK(9, 0)
#define PHY_I3C_SDR3_CTRL1			0x60
#define PHY_I3C_SDR3_CTRL1_TBIT_H		GENMASK(25, 16)
#define PHY_I3C_SDR3_CTRL1_TBIT_L		GENMASK(9, 0)
#define PHY_I3C_SDR3_CTRL2			0x64
#define PHY_I3C_SDR3_CTRL2_HD_PP		GENMASK(25, 16)
#define PHY_I3C_SDR3_CTRL2_TBIT_HD_PP		GENMASK(9, 0)
/* I3C PP SDR4 */
#define PHY_I3C_SDR5_CTRL0			0x68
#define PHY_I3C_SDR5_CTRL0_SCL_H		GENMASK(25, 16)
#define PHY_I3C_SDR5_CTRL0_SCL_L		GENMASK(9, 0)
#define PHY_I3C_SDR5_CTRL1			0x6C
#define PHY_I3C_SDR5_CTRL1_TBIT_H		GENMASK(25, 16)
#define PHY_I3C_SDR5_CTRL1_TBIT_L		GENMASK(9, 0)
#define PHY_I3C_SDR5_CTRL2			0x70
#define PHY_I3C_SDR5_CTRL2_HD_PP		GENMASK(25, 16)
#define PHY_I3C_SDR5_CTRL2_TBIT_HD_PP		GENMASK(9, 0)
/* I3C PP DDR */
#define PHY_I3C_DDR_CTRL0			0x74
#define PHY_I3C_DDR_CTRL0_SCL_H			GENMASK(25, 16)
#define PHY_I3C_DDR_CTRL0_SCL_L			GENMASK(9, 0)
#define PHY_I3C_DDR_CTRL1			0x78
#define PHY_I3C_DDR_CTRL1_TBIT_H		GENMASK(25, 16)
#define PHY_I3C_DDR_CTRL1_TBIT_L		GENMASK(9, 0)
#define PHY_I3C_DDR_CTRL2			0x7C
#define PHY_I3C_DDR_CTRL2_HD_PP			GENMASK(25, 16)
#define PHY_I3C_DDR_CTRL2_TBIT_HD_PP		GENMASK(9, 0)

/* 1MHz */
#define PHY_I3C_DDR_DEFAULT_SCL_H_NS		380
#define PHY_I3C_DDR_DEFAULT_SCL_L_NS		620
#define PHY_I3C_DDR_DEFAULT_TBIT_H_NS		380
#define PHY_I3C_DDR_DEFAULT_TBIT_L_NS		620
#define PHY_I3C_DDR_DEFAULT_HD_PP_NS		10
#define PHY_I3C_DDR_DEFAULT_TBIT_HD_PP_NS	10

#define PHY_I3C_SR_P_PREPARE_CTRL		0x80
#define PHY_I3C_SR_P_PREPARE_CTRL_HD		GENMASK(25, 16)
#define PHY_I3C_SR_P_PREPARE_CTRL_SCL_L		GENMASK(9, 0)
#define PHY_I3C_SR_P_DEFAULT_HD_NS	10
#define PHY_I3C_SR_P_DEFAULT_SCL_L_NS	40

#define PHY_PULLUP_EN		0x98
#define PHY_PULLUP_EN_SCL	GENMASK(14, 12)
#define PHY_PULLUP_EN_SDA	GENMASK(10, 8)
#define PHY_PULLUP_EN_DDR_SCL	GENMASK(6, 4)
#define PHY_PULLUP_EN_DDR_SDA	GENMASK(2, 0)

/*
 * PIO Access Area
 */

#define pio_reg_read(r)		readl(hci->PIO_regs + (PIO_##r))
#define pio_reg_write(r, v)	writel(v, hci->PIO_regs + (PIO_##r))

#define PIO_COMMAND_QUEUE_PORT		0x00
#define PIO_RESPONSE_QUEUE_PORT		0x04
#define PIO_XFER_DATA_PORT		0x08
#define PIO_IBI_PORT			0x0c

#define PIO_QUEUE_THLD_CTRL		0x10
#define QUEUE_IBI_STATUS_THLD		GENMASK(31, 24)
#define QUEUE_IBI_DATA_THLD		GENMASK(23, 16)
#define QUEUE_RESP_BUF_THLD		GENMASK(15, 8)
#define QUEUE_CMD_EMPTY_BUF_THLD	GENMASK(7, 0)

#define PIO_DATA_BUFFER_THLD_CTRL	0x14
#define DATA_RX_START_THLD		GENMASK(26, 24)
#define DATA_TX_START_THLD		GENMASK(18, 16)
#define DATA_RX_BUF_THLD		GENMASK(10, 8)
#define DATA_TX_BUF_THLD		GENMASK(2, 0)

#define PIO_QUEUE_SIZE			0x18
#define TX_DATA_BUFFER_SIZE		GENMASK(31, 24)
#define RX_DATA_BUFFER_SIZE		GENMASK(23, 16)
#define IBI_STATUS_SIZE			GENMASK(15, 8)
#define CR_QUEUE_SIZE			GENMASK(7, 0)

#define PIO_INTR_STATUS			0x20
#define PIO_INTR_STATUS_ENABLE		0x24
#define PIO_INTR_SIGNAL_ENABLE		0x28
#define PIO_INTR_FORCE			0x2c
#define STAT_TRANSFER_ERR		BIT(9)
#define STAT_TRANSFER_ABORT		BIT(5)
#define STAT_RESP_READY			BIT(4)
#define STAT_CMD_QUEUE_READY		BIT(3)
#define STAT_IBI_STATUS_THLD		BIT(2)
#define STAT_RX_THLD			BIT(1)
#define STAT_TX_THLD			BIT(0)

#define PIO_QUEUE_CUR_STATUS		0x38
#define CUR_IBI_Q_LEVEL			GENMASK(28, 20)
#define CUR_RESP_Q_LEVEL		GENMASK(18, 10)
#define CUR_CMD_Q_EMPTY_LEVEL		GENMASK(8, 0)

#define PIO_DATA_BUFFER_CUR_STATUS	0x3c
#define CUR_RX_BUF_LVL			GENMASK(26, 16)
#define CUR_TX_BUF_LVL			GENMASK(10, 0)

/*
 * Handy status bit combinations
 */
#define STAT_ALL_ERRORS			(STAT_TRANSFER_ABORT | \
					 STAT_TRANSFER_ERR)

/*
 * Target mode Response Descriptor Structure
 */
#define TARGET_RESP_STATUS(resp)	FIELD_GET(GENMASK(31, 28), resp)
#define TARGET_RESP_XFER_TYPE(resp)	FIELD_GET(BIT(27), resp)
#define TARGET_RESP_XFER_TYPE_W		0
#define TARGET_RESP_XFER_TYPE_R		1
#define TARGET_RESP_CCC_INDICATE(resp)	FIELD_GET(BIT(26), resp)
#define TARGET_RESP_TID(resp)		FIELD_GET(GENMASK(25, 24), resp)
#define TARGET_RESP_CCC_HDR(resp)	FIELD_GET(GENMASK(23, 16), resp)
#define TARGET_RESP_SDR_PRIV_XFER	0
#define TARGET_RESP_DATA_LENGTH(resp)	FIELD_GET(GENMASK(15,  0), resp)

void i3c_register(struct bootdev *bd);
#endif
